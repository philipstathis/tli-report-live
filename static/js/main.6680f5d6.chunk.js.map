{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","columnDefs","headerName","field","sortable","filter","fetch","then","result","json","map","attendee","answerObjects","answers","roleAnswer","find","obj","clubName","clubNumber","rowData","setState","className","style","height","width","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wSAsEeA,G,8DA/Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAY,CAAC,CACXC,WAAY,aAAcC,MAAO,qBAAsBC,UAAU,EAAMC,QAAQ,GAC9E,CACDH,WAAY,wBAAyBC,MAAO,gBAC5C,CACAD,WAAY,yBAA0BC,MAAO,oBAC7C,CACAD,WAAY,2BAA4BC,MAAO,sBAC9C,CACDD,WAAY,YAAaC,MAAO,gBAZnB,E,gEAiBE,IAAD,OAClBG,MAAM,qEACLC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAM,OAAIA,EAAM,aACrBD,MAAK,SAAAC,GAAM,OAAIA,EAAOE,KAAI,SAAAC,GACzB,IAAIC,EAAgBD,EAASE,QACzBC,EAAaF,EAAcG,MAAK,SAAAC,GAClC,MAA8B,aAAvBA,EAAG,eAERF,IACFF,EAAa,KAAWE,EAAU,QAEpC,IAAIG,EAAWL,EAAcG,MAAK,SAAAC,GAChC,MAA8B,aAAvBA,EAAG,eAERC,IAAYL,EAAa,SAAeK,EAAQ,QAEpD,IAAIC,EAAaN,EAAcG,MAAK,SAAAC,GAClC,MAA8B,aAAvBA,EAAG,eAIZ,OAFIE,IAAcN,EAAa,WAAiBM,EAAU,QAEnDP,QAERJ,MAAK,SAAAY,GAAO,OAAI,EAAKC,SAAS,CAACD,iB,+BAIhC,OACE,yBACEE,UAAU,kBACVC,MAAO,CACPC,OAAQ,QACRC,MAAO,WAIP,kBAAC,cAAD,CACEvB,WAAYwB,KAAKzB,MAAMC,WACvBkB,QAASM,KAAKzB,MAAMmB,e,GAzDZO,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6680f5d6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnDefs: [{\n        headerName: \"First Name\", field: \"profile.first_name\", sortable: true, filter: true\n      }, {\n        headerName: \"Officer Role Selected\", field: \"answers.role\"\n      },{\n        headerName: \"Toastmasters Club Name\", field: \"answers.clubName\"\n      },{\n        headerName: \"Toastmasters Club Number\", field: \"answers.clubNumber\"\n      }, {\n        headerName: \"Confirmed\", field: \"checked_in\"\n      }],\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://a5slwb8wx6.execute-api.us-east-1.amazonaws.com/dev/events')\n    .then(result => result.json())\n    .then(result => result[\"attendees\"])\n    .then(result => result.map(attendee => {\n      let answerObjects = attendee.answers;\n      let roleAnswer = answerObjects.find(obj => {\n        return obj[\"question_id\"] === \"34234268\";\n      });\n      if (roleAnswer) {\n        answerObjects[\"role\"] = roleAnswer[\"answer\"]\n      }\n      let clubName = answerObjects.find(obj => {\n        return obj[\"question_id\"] === \"34370854\";\n      });\n      if (clubName) { answerObjects[\"clubName\"] = clubName[\"answer\"] }\n      // else { answerObjects[\"clubName\"] = '';}\n      let clubNumber = answerObjects.find(obj => {\n        return obj[\"question_id\"] === \"34370856\";\n      });\n      if (clubNumber) { answerObjects[\"clubNumber\"] = clubNumber[\"answer\"] }\n      // else { answerObjects[\"clubNumber\"] = '';}\n      return attendee;\n    }))\n    .then(rowData => this.setState({rowData}))\n  }\n\n  render() {\n    return (\n      <div\n        className=\"ag-theme-alpine\"\n        style={{\n        height: '500px',\n        width: '1000px' \n      }\n      }\n      >\n        <AgGridReact\n          columnDefs={this.state.columnDefs}\n          rowData={this.state.rowData}>\n        </AgGridReact>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}